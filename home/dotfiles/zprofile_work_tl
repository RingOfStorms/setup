export TEMPUS_USER_ID='ebf230f6-8443-4bbd-ac2d-538ca35dd5cd'
export TEMPUS_TENANT_ID='0066be0c-1687-4fd9-8a95-d8a85cd16a6f'

# Tempus Tokens
# https://tempus.oktapreview.com/oauth2/ausudtf4sc4dGgLrN0h7
alias token_zro="okta-personal-token get preview/Tempus-ZRO 2> /dev/null | tr -d '\n'"
alias tz="token_zro | pbcopy"
alias token_alp="okta-personal-token get preview/Tempus-ALP 2> /dev/null | tr -d '\n'"
alias ta="token_alp | pbcopy"
alias token_bet="okta-personal-token get preview/sundial-staging 2> /dev/null | tr -d '\n'"
alias tb="token_bet | pbcopy"
alias ts="tb"
alias token_vld="okta-personal-token get prod/Tempus-VAL 2> /dev/null | tr -d '\n'"
alias tv="token_vld | pbcopy"
alias token_prd="okta-personal-token get prod/sundial-production 2> /dev/null | tr -d '\n'"
alias tp="token_prd | pbcopy"
alias vip='vi "+cal cursor(3,18)" -c "startinsert"'
# Tempus Tacos
alias tacos='AWS_PROFILE=tempus-science-joshua-bell tacos'
# Transform Hub
alias thcl=/Users/joshua.bell/.nvm/versions/node/v16.13.1/bin/thcl
# Aws cli
alias aws=/Users/joshua.bell/dev/home_bins/aws-sdk/aws-cli/aws

# Tempus Specific
tam () {
  if [[ $1 = "update" && $2 = "all" ]]; then
    echo "updating all tam apps"
    for app in $(tam list | grep âœ… | cut -d' ' -f2); do
      tam update $app
    done
  else
    command tam $@
  fi
}

ssample () {
  RET=$(pwd)
  echo Sampling $(pbpaste)...
  cd ~/tempus/dps-sdk_ts; npx ts-node examples/service/sampleBetas.ts $(pbpaste); cd $RET
}

killt () {
  kill_ctl tanium
  # kill_ctl crowdstrike
  kill_ctl airwatch
  kill_ctl eppclient
  kill_ctl ManagedClient
  skill_psg endpointsecurityd
  skill_psg ManagedClient
  # skill_psg crowdstrike # dont do this one security will message you and you will be in trouble
}

dbaproxy_refresh() {
    ssh-keygen -R dbaproxy.devtempus.com
    ssh-keygen -R dbaproxy.securetempus.com
}

dbaproxy () {
  dbaproxy_refresh

  ssh ringofstorms@dbaproxy.devtempus.com
}

aws_token() {
  HOSTNAME=$1
  PORT=$2
  USER=$3
  REGION=$4
  echo $(aws rds generate-db-auth-token --profile "tempusdevops-eng-team-engineer" --hostname "${HOSTNAME}" --port "${PORT}" --username "${USER}" --region="${REGION}")
}

tunnel() {
  dbaproxy_refresh

  SERVICE=$1
  ENV=$2
  LPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $3 }' ~/.databases)
  URI=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $4 }' ~/.databases)
  RPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $5 }' ~/.databases)

  ssh -N -L ${LPORT}:${URI}:${RPORT} ringofstorms@dbaproxy.devtempus.com -v
}

db() {
  SERVICE=$1
  ENV=$2
  LPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $3 }' ~/.databases)
  URI=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $4 }' ~/.databases)
  RPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $5 }' ~/.databases)
  DIALECT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $6 }' ~/.databases)
  DATABASE=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $7 }' ~/.databases)
  USER=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $8 }' ~/.databases)
  REGION=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $9 }' ~/.databases)
  TOKEN=$(aws_token ${URI} ${RPORT} ${USER} ${REGION})

  if [[ ${DIALECT} = 'psql' ]]; then
    docker run \
      -it \
      --rm \
      postgres:12 \
      psql "dbname=${DATABASE} host=docker.for.mac.host.internal port=${LPORT} user=${USER} password=${TOKEN}"
  else
    docker run \
      -it \
      --rm \
      mysql:8.0 \
        mysql \
          --binary-as-hex \
          --enable-cleartext-plugin \
          --port=${LPORT} \
          --password=${TOKEN} \
          -u${USER} \
          -hdocker.for.mac.host.internal \
          ${DATABASE}
  fi
}

db_token() {
  SERVICE=$1
  ENV=$2
  URI=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $4 }' ~/.databases)
  RPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $5 }' ~/.databases)
  USER=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $8 }' ~/.databases)
  REGION=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $9 }' ~/.databases)
  TOKEN=$(aws_token ${URI} ${RPORT} ${USER} ${REGION})
  echo $TOKEN
}

tp_dps_prd () {
  tsh db login --db-name=prd_data_products_service --db-user=prd-ro@tempus-teleport.iam prd-data-products-replica-5009ee53 &> /dev/null
  tsh db connect prd-data-products-replica-5009ee53
}

tp_dps_val () {
  tsh db login --db-name=val_data_products_service --db-user=val-ro@tempus-teleport.iam val-data-products-replica-151e72a6 &> /dev/null
  tsh db connect val-data-products-replica-151e72a6
}

tp_dps_bet () {
  tsh db login --db-name=bet_data_products_service --db-user=bet-ro@tempus-teleport.iam bet-data-products-replica-a79d96d7 &> /dev/null
  tsh db connect bet-data-products-replica-a79d96d7
}

tp_dps_bet_rw () {
  tsh db login --db-name=bet_data_products_service --db-user=bet-rw-data@tempus-teleport.iam bet-data-products-8ad67add &> /dev/null
  tsh db connect bet-data-products-8ad67add
}

tp_dps_alp () {
  tsh db login --db-name=alp_data_products_service --db-user=alp-ro@tempus-teleport.iam alp-data-products-replica-cb12354d &> /dev/null
  tsh db connect alp-data-products-replica-cb12354d
}

tp_dps_zro () {
  tsh db login --db-name=zro_data_products_service --db-user=zro-ro@tempus-teleport.iam zro-data-products-0a02149e-replica-70cc5036 &> /dev/null
  tsh db connect zro-data-products-0a02149e-replica-70cc5036
}

tp_dps_zro_rw () {
  tsh db login --db-name=zro_data_products_service --db-user=zro-rw-data@tempus-teleport.iam zro-data-products-0a02149e &> /dev/null
  tsh db connect zro-data-products-0a02149e
}

morning () {
  # defaultbrowser chrome # ! teleport supports firefox now so dont need this anymore !
  # read -n 1
  ctv
  tsh db login --db-name=prd_data_products_service --db-user=prd-ro@tempus-teleport.iam prd-data-products-replica-5009ee53 &> /dev/null
  tsh db login --db-name=val_data_products_service --db-user=val-ro@tempus-teleport.iam val-data-products-replica-151e72a6 &> /dev/null
  tsh db login --db-name=bet_data_products_service --db-user=bet-ro@tempus-teleport.iam bet-data-products-replica-a79d96d7 &> /dev/null
  tsh db login --db-name=alp_data_products_service --db-user=alp-ro@tempus-teleport.iam alp-data-products-replica-cb12354d &> /dev/null
  tsh db login --db-name=zro_data_products_service --db-user=zro-ro@tempus-teleport.iam zro-data-products-0a02149e-replica-70cc5036 &> /dev/null
  # defaultbrowser firefox

  open https://tempus.service-now.com/hdportal
  open https://mail.google.com/mail/u/0/#inbox
}

tnodequit() {
    PIDS=$(ps aux | grep node | grep tempus | awk '{print $2}')
    echo 'Killing: '${PIDS}
    for pid in ${PIDS}; do
      kill -9 ${pid} &> /dev/null
    done
}

putdp () {
  date=$(date)
  url=$(pbpaste)
  curl \
    --location \
    --request PUT \
    "$url" \
    --header 'Content-Type: text/plain' \
    --data-raw "test data ${date}"
}

# Random
dfsetup () {
  export JAVA_HOME=$(ls -d /Library/Java/JavaVirtualMachines/* | grep jdk-11 | head -n1)/Contents/Home
  java --version
}

export PATH="${PATH}:${HOME}/dev/home_bins/google-cloud-sdk/bin"

