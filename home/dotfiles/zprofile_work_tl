export TEMPUS_USER_ID='ebf230f6-8443-4bbd-ac2d-538ca35dd5cd'
export TEMPUS_TENANT_ID='0066be0c-1687-4fd9-8a95-d8a85cd16a6f'

# Tempus Tokens
# https://tempus.oktapreview.com/oauth2/ausudtf4sc4dGgLrN0h7
alias token_zro="okta-personal-token get preview/Tempus-ZRO 2> /dev/null | tr -d '\n'"
alias tz="token_zro | pbcopy"
alias token_alp="okta-personal-token get preview/Tempus-ALP 2> /dev/null | tr -d '\n'"
alias ta="token_alp | pbcopy"
alias token_bet="okta-personal-token get preview/sundial-staging 2> /dev/null | tr -d '\n'"
alias tb="token_bet | pbcopy"
alias ts="tb"
alias token_vld="okta-personal-token get prod/Tempus-VAL 2> /dev/null | tr -d '\n'"
alias tv="token_vld | pbcopy"
alias token_prd="okta-personal-token get prod/sundial-production 2> /dev/null | tr -d '\n'"
alias tp="token_prd | pbcopy"
alias vip='vi "+cal cursor(3,18)" -c "startinsert"'
# Tempus Tacos
alias tacos='AWS_PROFILE=tempus-science-joshua-bell tacos'
# Transform Hub
alias thcl=/Users/joshua.bell/.nvm/versions/node/v16.13.1/bin/thcl
alias dps_sql_bet=dps_sql_stg

# Tempus Specific
tam () {
  if [[ $1 = "update" && $2 = "all" ]]; then
    echo "updating all tam apps"
    for app in $(tam list | grep âœ… | cut -d' ' -f2); do
      tam update $app
    done
  else
    command tam $@
  fi
}

ssample () {
  RET=$(pwd)
  echo Sampling $(pbpaste)...
  cd ~/tempus/dps-sdk_ts; npx ts-node examples/service/sampleBetas.ts $(pbpaste); cd $RET
}

killt () {
  kill_ctl tanium
  kill_ctl crowdstrike
  kill_ctl airwatch
  kill_ctl eppclient
  kill_ctl ManagedClient
  skill_psg endpointsecurityd
  skill_psg ManagedClient
  skill_psg crowdstrike
}

dbaproxy_refresh() {
    ssh-keygen -R dbaproxy.devtempus.com
    ssh-keygen -R dbaproxy.securetempus.com
}

dbaproxy () {
  dbaproxy_refresh

  ssh ringofstorms@dbaproxy.devtempus.com
}

aws_token() {
  HOSTNAME=$1
  PORT=$2
  USER=$3
  REGION=$4
  echo $(aws rds generate-db-auth-token --profile "tempusdevops-eng-team-engineer" --hostname "${HOSTNAME}" --port "${PORT}" --username "${USER}" --region="${REGION}")
}

tunnel() {
  dbaproxy_refresh

  SERVICE=$1
  ENV=$2
  LPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $3 }' ~/.databases)
  URI=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $4 }' ~/.databases)
  RPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $5 }' ~/.databases)

  ssh -N -L ${LPORT}:${URI}:${RPORT} ringofstorms@dbaproxy.devtempus.com -v
}

db() {
  SERVICE=$1
  ENV=$2
  LPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $3 }' ~/.databases)
  URI=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $4 }' ~/.databases)
  RPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $5 }' ~/.databases)
  DIALECT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $6 }' ~/.databases)
  DATABASE=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $7 }' ~/.databases)
  USER=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $8 }' ~/.databases)
  REGION=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $9 }' ~/.databases)
  TOKEN=$(aws_token ${URI} ${RPORT} ${USER} ${REGION})

  if [[ ${DIALECT} = 'psql' ]]; then
    docker run \
      -it \
      --rm \
      postgres:12 \
      psql "dbname=${DATABASE} host=docker.for.mac.host.internal port=${LPORT} user=${USER} password=${TOKEN}"
  else
    docker run \
      -it \
      --rm \
      mysql:8.0 \
        mysql \
          --binary-as-hex \
          --enable-cleartext-plugin \
          --port=${LPORT} \
          --password=${TOKEN} \
          -u${USER} \
          -hdocker.for.mac.host.internal \
          ${DATABASE}
  fi
}

db_token() {
  SERVICE=$1
  ENV=$2
  URI=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $4 }' ~/.databases)
  RPORT=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $5 }' ~/.databases)
  USER=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $8 }' ~/.databases)
  REGION=$(awk -F, -v service="${SERVICE}" -v env="${ENV}" '$1 == service && $2 == env { print $9 }' ~/.databases)
  TOKEN=$(aws_token ${URI} ${RPORT} ${USER} ${REGION})
  echo $TOKEN
}

rprod() {
  FROM_PWD=$(pwd)
  cd ~/Desktop/scripts/dps
  TOKEN=$(PROD=1 token) npx ts-node reconcile.ts
  cd $FROM_PWD
}

rstag() {
  FROM_PWD=$(pwd)
  cd ~/Desktop/scripts/dps
  TOKEN=$(token) DOMAIN=stagingtempus npx ts-node reconcile.ts
  cd $FROM_PWDa
}

tnodequit() {
    PIDS=$(ps aux | grep node | grep tempus | awk '{print $2}')
    echo 'Killing: '${PIDS}
    for pid in ${PIDS}; do
      kill -9 ${pid} &> /dev/null
    done
}

dps_sql_prd () {
  QUERY=$(node -e "console.log(JSON.stringify({rawQueryString:process.argv[1]}))" "$@")
  RESPONSE=$(curl -X 'PATCH' \
    'https://data-products.securetempus.com/database/adHocSQLQuery' \
    -H 'accept: application/json' \
    -H 'Authorization: Bearer '$(token_prd) \
    -H 'Content-Type: application/json' \
    -d ${QUERY})
  echo ${RESPONSE}
  echo ${RESPONSE} | jq '.queryResponse | del(._types, ._parsers, .fields)'
}

dps_sql_val () {
  QUERY=$(node -e "console.log(JSON.stringify({rawQueryString:process.argv[1]}))" "$@")
  RESPONSE=$(curl -X 'PATCH' \
    'https://data-products.val.gcp.tempus.cloud/database/adHocSQLQuery' \
    -H 'accept: application/json' \
    -H 'Authorization: Bearer '$(token_vld) \
    -H 'Content-Type: application/json' \
    -d ${QUERY})
  echo ${RESPONSE}
  echo ${RESPONSE} | jq '.queryResponse | del(._types, ._parsers, .fields)'
}

dps_sql_stg () {
  QUERY=$(node -e "console.log(JSON.stringify({rawQueryString:process.argv[1]}))" "$@")
  RESPONSE=$(curl -X 'PATCH' \
    'https://data-products.stagingtempus.com/database/adHocSQLQuery' \
    -H 'accept: application/json' \
    -H 'Authorization: Bearer '$(token_bet) \
    -H 'Content-Type: application/json' \
    -d ${QUERY})
  echo ${RESPONSE}
  echo ${RESPONSE} | jq '.queryResponse | del(._types, ._parsers, .fields)'
}

dps_sql_dev () {
  QUERY=$(node -e "console.log(JSON.stringify({rawQueryString:process.argv[1]}))" "$@")
  RESPONSE=$(curl -X 'PATCH' \
    'https://data-products.devtempus.com/database/adHocSQLQuery' \
    -H 'accept: application/json' \
    -H 'Authorization: Bearer '$(token_alp) \
    -H 'Content-Type: application/json' \
    -d ${QUERY})
  echo ${RESPONSE}
  echo ${RESPONSE} | jq '.queryResponse | del(._types, ._parsers, .fields)'
}

dps_sql_zro () {
  QUERY=$(node -e "console.log(JSON.stringify({rawQueryString:process.argv[1]}))" "$@")
  RESPONSE=$(curl -X 'PATCH' \
    'https://data-products-sub-dev.devtempus.com/database/adHocSQLQuery' \
    -H 'accept: application/json' \
    -H 'Authorization: Bearer '$(token_zro) \
    -H 'Content-Type: application/json' \
    -d ${QUERY})
  echo ${RESPONSE}
  echo ${RESPONSE} | jq '.queryResponse | del(._types, ._parsers, .fields)'
}

dps_sql_all () {
  echo PROD
  dps_sql_prd $@
  echo VAL
  dps_sql_val $@
  echo BETA
  dps_sql_bet $@
  echo DEV
  dps_sql_dev $@
  echo ZERO
  dps_sql_zro $@
}

putdp () {
  date=$(date)
  url=$(pbpaste)
  curl \
    --location \
    --request PUT \
    "$url" \
    --header 'Content-Type: text/plain' \
    --data-raw "test data ${date}"
}

spec_reviews () {
  curl -X 'GET' \
    'https://data-products.securetempus.com/v3/data-product-specs?limit=100&status=REVIEW' \
    -H 'Authorization: Bearer '$(token_prd) \
    | jq '.items[] | .id + " " + .type + " " + .version + " " + .creator' \
    | column -t
}

spec_get_reviewers () {
  curl -X 'GET' \
      'https://data-products.securetempus.com/v3/data-product-specs/'$1'/reviews?limit=100' \
      -H 'Authorization: Bearer '$(token_prd)
}

spec_del_review () {
  curl -X 'DELETE' \
       'https://data-products.securetempus.com/v3/data-product-specs/review/'$1 \
       -H 'Authorization: Bearer '$(token_prd)
}

spec_add_review () {
  curl -X 'POST' \
     'https://data-products.securetempus.com/v3/data-product-specs/review' \
     -H 'Authorization: Bearer '$(token_prd) \
     -H 'Content-Type: application/json' \
     -d '{"dataProductSpecId": "'$1'","reviewGroup": "REQUIRED","reviewer": "'$2'"}' \
     &>/dev/null
}

spec_overwrite_eco_reviewers_with () {
  SPEC_ID=$1
  if [ -z "$2" ]; then
    ASSIGN_TO=$(decode_jwt $(token_bet) | jq '.sub' | sed 's/"//g')
  else
    ASSIGN_TO="$2"
  fi
  ECO_TEAM=("test.eco.script@tempus.com" "aaron.zipursky@tempus.com" "gregory.block@tempus.com" "jesse.shellabarger@tempus.com" "varun.nandu@tempus.com" "joshua.bell@tempus.com" "khalid.ahmed@tempus.com" "udayarc.reddy@tempus.com")
  ALL_REVIEWERS=$(spec_get_reviewers $SPEC_ID | jq '.items')
  PENDING_REVIEWERS=$(echo $ALL_REVIEWERS | jq '[.[] | select(.reviewStatus=="PENDING")]')

  echo "Editing reviewers for spec "$SPEC_ID":"
  # echo "\tCurrent reviewers:"$ALL_REVIEWERS
  # echo "\tPending reviewers:"$PENDING_REVIEWERS

  if [ ! -z "$PENDING_REVIEWERS" ]; then
    # echo "Checking eco team...."
    ALREADY_APPROVED=$(echo $ALL_REVIEWERS | jq --arg email "$ASSIGN_TO" '.[] | select(.reviewStatus=="APPROVED" and .reviewer==$email)')
    if [ -z "$ALREADY_APPROVED" ]; then
      spec_add_review $SPEC_ID $ASSIGN_TO
      echo "\tAdded "$ASSIGN_TO" as a required reviewer."
    else
      echo "Already approved by "$ASSIGN_TO"."
    fi

    for EMAIL in ${ECO_TEAM[@]}; do
      RESULT=$(echo $PENDING_REVIEWERS | jq --arg email "$EMAIL" '.[] | select(.reviewer==$email)')
      if [ ! -z "$RESULT" ]; then
        REVIEW_ID=$(echo $RESULT | jq '.id' | sed 's/"//g')
        spec_del_review $REVIEW_ID
        echo "\tRemoved eco review from "$EMAIL" ("$REVIEW_ID")."
      fi
    done
  else
    echo "Skipping... current reviewers is empty. Manually add yourself with command `spec_add_review #SPEC_ID $ASSIGN_TO`"
  fi
}

spec_all_overwrite_eco_reviewers_with () {
  if [ -z "$1" ]; then
    ASSIGN_TO=$(decode_jwt $(token_bet) | jq '.sub' | sed 's/"//g')
  else
    ASSIGN_TO="$1"
  fi

  # Set main reviewer for new specs to new person
  curl -X 'PUT' \
    'https://data-products.securetempus.com/private/environment-variables' \
    -H 'Authorization: Bearer '$(token_prd) \
    -H 'Content-Type: application/json' \
    -d '{ "name": "DPS_SPEC_REQUIRED_REVIEWER_EMAIL", "value": "'$ASSIGN_TO'" }'

  IDS=($(curl -X 'GET' \
    'https://data-products.securetempus.com/v3/data-product-specs?limit=100&status=REVIEW' \
    -H 'Authorization: Bearer '$(token_prd) \
    | jq '.items[] | .id' \
    | sed 's/"//g'))

  for ID in ${IDS[@]}; do
    spec_overwrite_eco_reviewers_with $ID $1
  done
}

export PATH="${PATH}:${HOME}/dev/home_bins/google-cloud-sdk/bin"
